#include <omp.h>
#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <random>
#include <math.h>
using namespace std;
#define N 16
double log2(double x);

int main() {
	// init
	int* arr = new int[N];
	int* sum1 = new int[N];
	int* sum2 = new int[N];
	srand((unsigned)time(nullptr));
	int i = 0;
	#pragma omp parallel shared(a, b) private(i)
	{
		#pragma omp for
		for (i = 0; i < N; ++i) {
			arr[i] = rand();
		}
	}
	// serial
	clock_t start = clock();
	sum1[N/2] = arr[N/2];
	for (i = N/2 + 1; i < N; ++i) {
		sum1[i] = sum1[i - 1] + arr[i];
	}
	clock_t end = clock();
	cout << "serial_time: " << end - start << "\n";
	// parallel
	start = clock();
	int j = 0;
	// 根节点从1计
	for (i = int(log2(N-1))-1; i >= 0; --i) {
		#pragma omp parallel shared(arr) private(j)
		{
			#pragma omp for
			for (j = (1 << i); j < (1 << (i + 1)); ++j) {
				arr[j] = arr[j << 1] + arr[(j << 1) + 1];
			}
		}
	}
	for (i = 0; i < int(log2(N-1)); ++i) {
		#pragma omp parallel shared(arr) private(j)
		{
			#pragma parallel for
			for (j = (1 << i); j < (1 << (i + 1)); ++j) {
				arr[j << 1] = arr[j] - arr[(j << 1) + 1];
				arr[(j << 1) + 1] = arr[j];
			}
		}
	}
	for (i = N / 2; i < N; ++i) {
		sum2[i] = arr[i];
	}
	end = clock();
	cout << "parallel_time: " << end - start << "\n";
	// check
	for (i = N/2; i < N; ++i) {
		if (sum1[i] != sum2[i]) {
			cout << "inconsistent" << "\n";
			break;
		}
	}
	cout << "finish...." << "\n";
	getchar();
	delete[] arr;
	delete[] sum1;
	delete[] sum2;
	return 0;
}

double log2(double x) {
	if (x <= 0) {
		cout << "error" << "\n";
		exit(-1);
	}
	return log(x) / log(2);
}