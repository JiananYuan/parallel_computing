#include <omp.h>
#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <random>
using namespace std;
#define N 100000000

int main() {
	// init
	int* a = new int[N];
	int* b = new int[N];
	int* c1 = new int[N];
	int* c2 = new int[N];
	srand((unsigned)time(nullptr));
	int i = 0;
	#pragma omp parallel shared(a, b) private(i)
	{
		#pragma omp for
		for (i = 0; i < N; ++i) {
			a[i] = rand();
			b[i] = rand();
		}
	}
	// serial
	clock_t start = clock();
	for (i = 0; i < N; ++i) {
		c1[i] = a[i] + b[i];
	}
	clock_t end = clock();
	cout << "serial_time: " << end - start << "\n";
	// parallel
	start = clock();
	#pragma omp parallel shared(a, b, c2) private(i)
	{
		#pragma omp for
		for (i = 0; i < N; ++i) {
			c2[i] = a[i] + b[i];
		}
	}
	end = clock();
	cout << "parallel_time: " << end - start << "\n";
	// check
	for (i = 0; i < N; ++i) {
		if (c1[i] != c2[i]) {
			cout << "inconsistent" << "\n";
		}
	}
	cout << "finish...." << "\n";
	getchar();
	delete[] a;
	delete[] b;
	delete[] c1;
	delete[] c2;
	return 0;
}